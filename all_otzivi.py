import requests
import re
import random
import pandas as pd
import logging
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from collections import Counter
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from tokens import tokens

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤
def send_response(token, text, feedback_id):
    url = 'https://feedbacks-api.wildberries.ru/api/v1/feedbacks'
    headers = {'Authorization': token}
    body = {"id": feedback_id, "text": text}
    
    try:
        response = requests.patch(url, headers=headers, json=body)
        if response.status_code == 200:
            logging.info(f"Successfully sent response for feedback ID {feedback_id}")
        else:
            logging.error(f"Failed to send response for feedback ID {feedback_id}: {response.status_code}")
    except Exception as e:
        logging.error(f"Error occurred while sending response: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤
def collect_feedbacks(tokens):
    extracted_negative = []
    extracted_positive = []
    url = 'https://feedbacks-api.wildberries.ru/api/v1/feedbacks'

    for token in tokens:
        headers = {'Authorization': token}
        params = {"isAnswered": 'false', "take": '5000', "skip": '0'}
        
        try:
            response = requests.get(url, headers=headers, params=params)
            response.raise_for_status()
            data = response.json()

            feedbacks = data.get('data', {}).get('feedbacks', [])
            logging.info(f"Collected {len(feedbacks)} feedbacks")
            
            for feedback in feedbacks:
                product_id = feedback['productDetails']['nmId']
                supplier_article = feedback['productDetails']['supplierArticle']
                product_name = feedback['productDetails']['productName']
                text = feedback['text']
                rating = feedback['productValuation']
                feedback_id = feedback['id']
                creation_date = feedback['createdDate']

                # –ï—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ 5 –∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                if rating == 5 and text:
                    generate_response(text, feedback_id, token)

                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö
                if rating in [1, 2, 3, 4]:
                    extracted_negative.append({
                        'date': creation_date,
                        'product_id': product_id,
                        'supplier_article': supplier_article,
                        'product_name': product_name,
                        'rating': rating,
                        'text': text,
                    })
                if rating in [4, 5]:
                    extracted_positive.append({
                        'date': creation_date,
                        'product_id': product_id,
                        'supplier_article': supplier_article,
                        'product_name': product_name,
                        'rating': rating,
                        'text': text,
                    })
        except requests.RequestException as e:
            logging.error(f"Failed to collect feedbacks: {e}")
    
    df_negative = pd.DataFrame(extracted_negative)
    df_positive = pd.DataFrame(extracted_positive)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º DataFrame'—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    return df_negative, df_positive

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∑ –≤ —Ç–µ–∫—Å—Ç–µ
def contains_negative_phrases(text, negative_phrases):
    clean_text = re.sub(r'[^\p{L}\s]', '', text).lower()
    for phrase in negative_phrases:
        if re.search(r'\b' + re.escape(phrase.lower()) + r'\b', clean_text):
            return True
    return False

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤
def generate_response(text, feedback_id, token):
    negative_phrases = ['—Å–º–æ—Ç—Ä–∏ —Ñ–æ—Ç–æ', '–∑–∞—Å–æ—Ö–ª–∏', '—Ä–≤–∞–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞', '–ø–æ–≤—Ä–µ–∂–¥–µ–Ω']
    response_templates = {
        'podarok': '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ –∏ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥–∞—Ä–∫–∞! –ñ–¥–µ–º –í–∞—Å –∑–∞ –Ω–æ–≤—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞.',
        'udovolstvie': '–†–∞–¥—ã, —á—Ç–æ –Ω–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏–Ω–æ—Å—è—Ç –í–∞–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ! –ñ–¥–µ–º –í–∞—Å –∑–∞ –Ω–æ–≤—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏.',
        'quality': '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞. –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–Ω–µ—Ç–µ—Å—å –¥–æ–≤–æ–ª—å–Ω—ã –Ω–æ–≤—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏.',
        'like': '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º —Ç–æ–≤–∞—Ä–µ! –ñ–µ–ª–∞–µ–º —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö —É—Å–ø–µ—Ö–æ–≤.',
        'recomendation': '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞. –ñ–¥–µ–º –í–∞—Å –∑–∞ –Ω–æ–≤—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏!',
        'smile': '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ—Ç–∑—ã–≤! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –Ω–∞—à —Ç–æ–≤–∞—Ä –ø—Ä–∏–Ω–µ—Å –í–∞–º —Ä–∞–¥–æ—Å—Ç—å.',
        'default': '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –æ—Ç–∑—ã–≤! –ñ–¥–µ–º –í–∞—Å –∑–∞ –Ω–æ–≤—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏ –≤ PRIMEHOBBY.'
    }

    keywords = {
        'podarok': ['–ø–æ–¥–∞—Ä–æ–∫', '—Å—é—Ä–ø—Ä–∏–∑', '–ø–æ–∑–¥—Ä–∞–≤–∏–ª'],
        'udovolstvie': ['—É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ', '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ'],
        'quality': ['–∫–∞—á–µ—Å—Ç–≤–æ', '–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π'],
        'smile': ['‚ù§Ô∏è', 'üëçüèª', 'ü•∞', 'üî•', 'üòç'],
        'like': ['–ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å', '–Ω—Ä–∞–≤–∏—Ç—å—Å—è'],
        'recomendation': ['—Ä–µ–∫–æ–º–µ–Ω–¥—É—é', '—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º']
    }

    # –ï—Å–ª–∏ –æ—Ç–∑—ã–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã, –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
    if contains_negative_phrases(text, negative_phrases):
        logging.info(f"Feedback ID {feedback_id} contains negative phrases, skipping response.")
        return

    # –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
    for category, words in keywords.items():
        if any(word in text.lower() for word in words):
            response_text = response_templates.get(category, response_templates['default'])
            send_response(token, response_text, feedback_id)
            return

    # –ï—Å–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç
    send_response(token, response_templates['default'], feedback_id)


collect_feedbacks(tokens)